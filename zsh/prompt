# vim: syn=zsh

# easy color management
autoload -U colors
colors

# current dir only: ${PWD##*/}

#
# git branch in right prompt
# http://www.jukie.net/bart/blog/20080404105620
#

typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga chpwd_functions

# expansions in prompt
setopt prompt_subst

__CURRENT_GIT_BRANCH=
__CURRENT_GIT_VARS_INVALID=1

parse_git_branch() {
	if [ -x $(which git) ] &&
	git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

zsh_git_invalidate_vars() {
	__CURRENT_GIT_VARS_INVALID=1
}
zsh_git_compute_vars() {
	__CURRENT_GIT_BRANCH="$(parse_git_branch)"
	__CURRENT_GIT_VARS_INVALID=
}

chpwd_functions+='zsh_git_chpwd_update_vars'
zsh_git_chpwd_update_vars() {
	zsh_git_invalidate_vars
}

preexec_functions+='zsh_git_preexec_update_vars'
zsh_git_preexec_update_vars() {
	case "$(history $HISTCMD)" in 
		*git*) zsh_git_invalidate_vars ;;
	esac
}

get_git_prompt_info() {
	test -n "$__CURRENT_GIT_VARS_INVALID" && zsh_git_compute_vars
	test -n "$__CURRENT_GIT_BRANCH" && echo " [$__CURRENT_GIT_BRANCH]"
}

# Now set it
if [ ${EUID} -eq 0 ]; then
	PROMPT="%{$fg[red]%}%T %d [%j]%{$fg[yellow]%} %?  %#%_ %{$reset_color%}"
else
	PROMPT="%T %{$fg[green]%}%d%{$fg[yellow]%}"'$(get_git_prompt_info)'" %{$reset_color%}%?
%#%_ "
fi

unset __CURRENT_GIT_BRANCH
unset __CURRENT_GIT_VARS_INVALID
